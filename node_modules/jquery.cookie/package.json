{
  "_from": "jquery.cookie",
  "_id": "jquery.cookie@1.4.1",
  "_inBundle": false,
  "_integrity": "sha1-1j3OIJ6raR/mMxbbCMqeR+D5OFs=",
  "_location": "/jquery.cookie",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "jquery.cookie",
    "fetchSpec": "latest",
    "name": "jquery.cookie",
    "raw": "jquery.cookie",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/jquery.cookie/-/jquery.cookie-1.4.1.tgz",
  "_shasum": "d63dce209eab691fe63316db08ca9e47e0f9385b",
  "_spec": "jquery.cookie",
  "_where": "/var/www/work.loc",
  "author": {
    "name": "Klaus Hartl"
  },
  "bugs": {
    "url": "https://github.com/carhartl/jquery-cookie/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A simple, lightweight jQuery plugin for reading, writing and deleting cookies.",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-compare-size": "~0.4.0",
    "grunt-contrib-connect": "~0.5.0",
    "grunt-contrib-jshint": "~0.4.0",
    "grunt-contrib-qunit": "~0.2.0",
    "grunt-contrib-uglify": "~0.2.0",
    "grunt-contrib-watch": "~0.3.0",
    "grunt-saucelabs": "~4.1.1",
    "gzip-js": "~0.3.0"
  },
  "directories": {
    "test": "test"
  },
  "gitHead": "bd3c9713222bace68d25fe2128c0f8633cad1269",
  "homepage": "https://github.com/carhartl/jquery-cookie#readme",
  "jam": {
    "dependencies": {
      "jquery": ">=1.2"
    },
    "include": [
      "jquery.cookie.js"
    ],
    "main": "jquery.cookie.js"
  },
  "jspm": {
    "buildConfig": {
      "uglify": true
    },
    "files": [
      "jquery.cookie.js"
    ],
    "main": "jquery.cookie"
  },
  "license": "MIT",
  "main": "jquery.cookie.js",
  "name": "jquery.cookie",
  "optionalDependencies": {},
  "readme": "# jquery.cookie [![Build Status](https://travis-ci.org/carhartl/jquery-cookie.png?branch=master)](https://travis-ci.org/carhartl/jquery-cookie) [![Code Climate](https://codeclimate.com/github/carhartl/jquery-cookie.png)](https://codeclimate.com/github/carhartl/jquery-cookie)\n\nA simple, lightweight jQuery plugin for reading, writing and deleting cookies.\n\n**If you're viewing this at https://github.com/carhartl/jquery-cookie, you're reading the documentation for the master branch.\n[View documentation for the latest release (1.4.1).](https://github.com/carhartl/jquery-cookie/tree/v1.4.1)**\n\n## Build Status Matrix\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/jquery-cookie.svg)](https://saucelabs.com/u/jquery-cookie)\n\n## Installation\n\nInclude script *after* the jQuery library (unless you are packaging scripts somehow else):\n\n```html\n<script src=\"/path/to/jquery.cookie.js\"></script>\n```\n\n**Do not include the script directly from GitHub (http://raw.github.com/...).** The file is being served as text/plain and as such being blocked\nin Internet Explorer on Windows 7 for instance (because of the wrong MIME type). Bottom line: GitHub is not a CDN.\n\nThe plugin can also be loaded as AMD or CommonJS module.\n\n## Usage\n\nCreate session cookie:\n\n```javascript\n$.cookie('the_cookie', 'the_value');\n```\n\nCreate expiring cookie, 7 days from then:\n\n```javascript\n$.cookie('the_cookie', 'the_value', { expires: 7 });\n```\n\nCreate expiring cookie, valid across entire site:\n\n```javascript\n$.cookie('the_cookie', 'the_value', { expires: 7, path: '/' });\n```\n\nRead cookie:\n\n```javascript\n$.cookie('the_cookie'); // => \"the_value\"\n$.cookie('not_existing'); // => undefined\n```\n\nRead all available cookies:\n\n```javascript\n$.cookie(); // => { \"the_cookie\": \"the_value\", \"...remaining\": \"cookies\" }\n```\n\nDelete cookie:\n\n```javascript\n// Returns true when cookie was found, false when no cookie was found...\n$.removeCookie('the_cookie');\n\n// Same path as when the cookie was written...\n$.removeCookie('the_cookie', { path: '/' });\n```\n\n*Note: when deleting a cookie, you must pass the exact same path, domain and secure options that were used to set the cookie, unless you're relying on the default options that is.*\n\n## Configuration\n\n### raw\n\nBy default the cookie value is encoded/decoded when writing/reading, using `encodeURIComponent`/`decodeURIComponent`. Bypass this by setting raw to true:\n\n```javascript\n$.cookie.raw = true;\n```\n\n### json\n\nTurn on automatic storage of JSON objects passed as the cookie value. Assumes `JSON.stringify` and `JSON.parse`:\n\n```javascript\n$.cookie.json = true;\n```\n\n## Cookie Options\n\nCookie attributes can be set globally by setting properties of the `$.cookie.defaults` object or individually for each call to `$.cookie()` by passing a plain object to the options argument. Per-call options override the default options.\n\n### expires\n\n    expires: 365\n\nDefine lifetime of the cookie. Value can be a `Number` which will be interpreted as days from time of creation or a `Date` object. If omitted, the cookie becomes a session cookie.\n\n### path\n\n    path: '/'\n\nDefine the path where the cookie is valid. *By default the path of the cookie is the path of the page where the cookie was created (standard browser behavior).* If you want to make it available for instance across the entire domain use `path: '/'`. Default: path of page where the cookie was created.\n\n**Note regarding Internet Explorer:**\n\n> Due to an obscure bug in the underlying WinINET InternetGetCookie implementation, IEâ€™s document.cookie will not return a cookie if it was set with a path attribute containing a filename.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means one cannot set a path using `path: window.location.pathname` in case such pathname contains a filename like so: `/check.html` (or at least, such cookie cannot be read correctly).\n\n### domain\n\n    domain: 'example.com'\n\nDefine the domain where the cookie is valid. Default: domain of page where the cookie was created.\n\n### secure\n\n    secure: true\n\nIf true, the cookie transmission requires a secure protocol (https). Default: `false`.\n\n## Converters\n\nProvide a conversion function as optional last argument for reading, in order to change the cookie's value\nto a different representation on the fly.\n\nExample for parsing a value into a number:\n\n```javascript\n$.cookie('foo', '42');\n$.cookie('foo', Number); // => 42\n```\n\nDealing with cookies that have been encoded using `escape` (3rd party cookies):\n\n```javascript\n$.cookie.raw = true;\n$.cookie('foo', unescape);\n```\n\nYou can pass an arbitrary conversion function.\n\n## Contributing\n\nCheck out the [Contributing Guidelines](CONTRIBUTING.md)\n\n## Authors\n\n[Klaus Hartl](https://github.com/carhartl)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/carhartl/jquery-cookie.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "version": "1.4.1",
  "volo": {
    "url": "https://raw.github.com/carhartl/jquery-cookie/v{version}/jquery.cookie.js"
  }
}
