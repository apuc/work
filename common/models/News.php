<?php

namespace common\models;

use common\models\TagsRelation;
use Yii;
use yii\behaviors\SluggableBehavior;

/**
 * This is the model class for table "news".
 *
 * @property int $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property string $img
 * @property int $status
 * @property int $dt_create
 * @property int $dt_update
 * @property int $dt_public
 * @property int $country_id
 * @property int $views
 * @property string $meta_title
 * @property string $meta_description
 * @property string $meta_header
 * @property string $slug
 *
 * @property integer $countViews
 */
class News extends \yii\db\ActiveRecord
{
    const TYPE_ACTIVE = 1;
    const TYPE_UNACTIVE = 0;

    public function behaviors()
    {
        return [
            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'title',
                'slugAttribute' => 'slug',//default name slug
            ],
        ];
    }


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'news';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'content', 'meta_title', 'meta_description', 'meta_header'/*, 'slug'*/], 'required'],
            [['title', 'description', 'content', 'img', 'meta_title', 'meta_description', 'meta_header', 'slug'], 'string'],
            [['status', 'dt_create', 'dt_update', 'dt_public', 'country_id', 'views'], 'integer'],
        ];
    }

    public function extraFields()
    {
        return ['views0', 'countViews'];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Название',
            'description' => 'Описание',
            'content' => 'Содержание',
            'status' => 'Статус',
            'dt_create' => 'Дата создание',
            'dt_update' => 'Дата редактирования',
            'dt_public' => 'Дата публикации',
            'img' => 'Титульная картинка',
            'country_id' => 'Страна',
            'meta_title' => 'Заголовок страницы',
            'meta_description' => 'Описание страницы',
            'meta_header' => 'h1 заголовок страницы',
            'slug' => 'Slug',
            'views' => 'Количество просмотров'
        ];
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        if ($this->dt_create !== null) {
            $this->dt_create = date('d-m-Y', $this->dt_create);
        }

        if ($this->dt_update !== null) {
            $this->dt_update = date('d-m-Y', $this->dt_update);
        }

        if ($this->dt_public !== null) {
            $this->dt_public = date('d-m-Y', $this->dt_public);
        }
    }

    public static function getStatusList()
    {
        return [
            self::TYPE_UNACTIVE => 'Не активно',
            self::TYPE_ACTIVE => 'Активно',
        ];
    }

    public static function getStatusName($id)
    {
        return self::getStatusList()[$id];
    }

    public static function getTags($id)
    {
        return TagsRelation::find()
            ->where(['news_id' => $id])
            ->with('tags')
            ->limit(2)
            ->all();
    }

    public function getCountry()
    {
        return $this->hasOne(Country::className(), ['id' => 'country_id']);
    }

    public function getCountry1()
    {
        $country = [];
        foreach (Country::find()->all() as $value)
        {
            $country[$value->id] = $value->name;
        }
        return $country;
    }

    public function getViews0()
    {
        return $this->hasMany(Views::className(), ['subject_id' => 'id'])->where(['subject_type' => 'New']);
    }

    public function getCountViews()
    {
        return Views::find()->where(['subject_id' => $this->id])->andWhere(['subject_type' => 'New'])->count();
    }
}
